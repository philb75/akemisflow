generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Only needed for Supabase production
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(UNASSIGNED)
  isActive      Boolean   @default(true) @map("is_active")
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  phone         String?
  timezone      String?   @default("Europe/Paris")
  language      String?   @default("en")
  companyId     String?   @map("company_id") @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @map("last_login_at")
  accounts      Account[]
  sessions      Session[]
  company       Contact?  @relation(fields: [companyId], references: [id])
  uploadedDocuments Document[] @relation("UploadedDocuments")
  verifiedDocuments Document[] @relation("VerifiedDocuments")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Contact {
  id                    String               @id @default(uuid()) @db.Uuid
  contactType           ContactType          @map("contact_type")
  name                  String               @db.VarChar(255)
  email                 String?              @db.VarChar(255)
  phone                 String?              @db.VarChar(50)
  status                ContactStatus        @default(ACTIVE)
  addressLine1          String?              @map("address_line1") @db.VarChar(255)
  addressLine2          String?              @map("address_line2") @db.VarChar(255)
  city                  String?              @db.VarChar(100)
  state                 String?              @db.VarChar(100)
  postalCode            String?              @map("postal_code") @db.VarChar(20)
  country               String?              @db.VarChar(2)
  taxId                 String?              @map("tax_id") @db.VarChar(100)
  currencyPreference    String?              @default("EUR") @map("currency_preference") @db.VarChar(3)
  parentCompanyId       String?              @map("parent_company_id") @db.Uuid
  profitSharePercentage Decimal?             @map("profit_share_percentage") @db.Decimal(5, 2)
  notes                 String?
  metadata              Json?
  
  // Client-specific fields
  clientOnboardingStatus String?             @default("NEW") @map("client_onboarding_status") @db.VarChar(20) // NEW, DOCUMENTS_PENDING, VERIFIED, ACTIVE
  clientCategory         String?             @map("client_category") @db.VarChar(20) // ENTERPRISE, SME, INDIVIDUAL, PARTNER
  clientRiskRating       String?             @map("client_risk_rating") @db.VarChar(10) // LOW, MEDIUM, HIGH
  preferredPaymentMethod String?             @map("preferred_payment_method") @db.VarChar(50)
  invoiceDeliveryMethod  String?             @default("EMAIL") @map("invoice_delivery_method") @db.VarChar(20) // EMAIL, PORTAL, POSTAL
  autoInvoiceGeneration  Boolean             @default(false) @map("auto_invoice_generation")
  
  // Airwallex Integration Fields for Client Payments
  airwallexPayerAccountId String?            @unique @map("airwallex_payer_account_id") @db.VarChar(255)
  airwallexEntityType     String?            @map("airwallex_entity_type") @db.VarChar(20) // PERSONAL, COMPANY
  airwallexPaymentMethods String?            @map("airwallex_payment_methods") @db.VarChar(500) // JSON array as string
  airwallexCapabilities   String?            @map("airwallex_capabilities") @db.VarChar(500) // JSON array of payment capabilities
  
  // Bank Details for Receiving Client Payments
  receivingBankName       String?            @map("receiving_bank_name") @db.VarChar(255)
  receivingAccountName    String?            @map("receiving_account_name") @db.VarChar(255)
  receivingAccountNumber  String?            @map("receiving_account_number") @db.VarChar(100)
  receivingAccountCurrency String?           @map("receiving_account_currency") @db.VarChar(3)
  receivingSwiftCode      String?            @map("receiving_swift_code") @db.VarChar(20)
  receivingIban           String?            @map("receiving_iban") @db.VarChar(34)
  receivingBankCountryCode String?           @map("receiving_bank_country_code") @db.VarChar(2)
  
  // Sync and Status Information for Airwallex
  airwallexSyncStatus     String?            @default("NONE") @map("airwallex_sync_status") @db.VarChar(20) // NONE, SYNCED, PENDING, ERROR
  airwallexLastSyncAt     DateTime?          @map("airwallex_last_sync_at") @db.Timestamptz(6)
  airwallexSyncError      String?            @map("airwallex_sync_error") @db.Text
  airwallexRawData        Json?              @map("airwallex_raw_data") // Store complete Airwallex response
  
  createdAt             DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime             @updatedAt @map("updated_at") @db.Timestamptz(6)
  bankAccounts          BankAccount[]
  consultantPayments    ConsultantPayment[]
  parentCompany         Contact?             @relation("CompanyHierarchy", fields: [parentCompanyId], references: [id])
  subContacts           Contact[]            @relation("CompanyHierarchy")
  clientInvoices        Invoice[]            @relation("ClientInvoices")
  partnerProfitShares   PartnerProfitShare[]
  transactions          Transaction[]        @relation("CounterpartyTransactions")
  users                 User[]
  documents             Document[]

  @@map("contacts")
}

model BankAccount {
  id                 String            @id @default(uuid()) @db.Uuid
  accountName        String            @map("account_name") @db.VarChar(255)
  bankName           String            @map("bank_name") @db.VarChar(255)
  accountNumber      String?           @map("account_number") @db.VarChar(100)
  currency           String            @db.VarChar(3)
  iban               String?           @db.VarChar(34)
  swiftBic           String?           @map("swift_bic") @db.VarChar(11)
  routingNumber      String?           @map("routing_number") @db.VarChar(20)
  sortCode           String?           @map("sort_code") @db.VarChar(10)
  accountType        BankAccountType   @default(BUSINESS) @map("account_type")
  status             BankAccountStatus @default(ACTIVE)
  dailyLimit         Decimal?          @map("daily_limit") @db.Decimal(15, 2)
  monthlyLimit       Decimal?          @map("monthly_limit") @db.Decimal(15, 2)
  airwallexAccountId String?           @unique @map("airwallex_account_id") @db.VarChar(255)
  contactId          String?           @map("contact_id") @db.Uuid
  metadata           Json?
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  contact            Contact?          @relation(fields: [contactId], references: [id])
  invoices           Invoice[]
  transactions       Transaction[]

  @@map("bank_accounts")
}

model Transaction {
  id                     String              @id @default(uuid()) @db.Uuid
  bankAccountId          String              @map("bank_account_id") @db.Uuid
  transactionType        TransactionType     @map("transaction_type")
  amount                 Decimal             @db.Decimal(15, 2)
  currency               String              @db.VarChar(3)
  description            String?
  referenceNumber        String?             @map("reference_number") @db.VarChar(255)
  category               TransactionCategory @default(OTHER)
  status                 TransactionStatus   @default(COMPLETED)
  feeAmount              Decimal?            @map("fee_amount") @db.Decimal(15, 2)
  feeCurrency            String?             @map("fee_currency") @db.VarChar(3)
  originalAmount         Decimal?            @map("original_amount") @db.Decimal(15, 2)
  originalCurrency       String?             @map("original_currency") @db.VarChar(3)
  exchangeRate           Decimal?            @map("exchange_rate") @db.Decimal(10, 6)
  counterpartyContactId  String?             @map("counterparty_contact_id") @db.Uuid
  airwallexTransactionId String?             @unique @map("airwallex_transaction_id") @db.VarChar(255)
  source                 TransactionSource   @default(MANUAL)
  sourceType             String?             @map("source_type") @db.VarChar(50)
  balanceAfterTransaction Decimal?           @map("balance_after_transaction") @db.Decimal(15, 2)
  originalDescription    String?             @map("original_description")
  rawData                Json?               @map("raw_data")
  transactionDate        DateTime            @map("transaction_date") @db.Date
  valueDate              DateTime?           @map("value_date") @db.Date
  batchId                String?             @map("batch_id") @db.Uuid
  reconciliationStatus   String?             @map("reconciliation_status") @db.VarChar(20)
  transactionPurpose     String?             @map("transaction_purpose") @db.VarChar(255)
  complianceNotes        String?             @map("compliance_notes")
  createdAt              DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime            @updatedAt @map("updated_at") @db.Timestamptz(6)
  consultantPayments     ConsultantPayment[] @relation("ConsultantPaymentTransactions")
  invoicePayments        Invoice[]           @relation("InvoicePayments")
  bankAccount            BankAccount         @relation(fields: [bankAccountId], references: [id])
  counterpartyContact    Contact?            @relation("CounterpartyTransactions", fields: [counterpartyContactId], references: [id])

  @@map("transactions")
}

model Invoice {
  id                   String              @id @default(uuid()) @db.Uuid
  invoiceNumber        String              @unique @map("invoice_number") @db.VarChar(100)
  displayNumber        String?             @map("display_number") @db.VarChar(50)
  clientContactId      String              @map("client_contact_id") @db.Uuid
  amount               Decimal             @db.Decimal(15, 2)
  currency             String              @db.VarChar(3)
  subtotal             Decimal?            @db.Decimal(15, 2)
  totalTax             Decimal?            @default(0) @map("total_tax") @db.Decimal(15, 2)
  totalAmount          Decimal?            @map("total_amount") @db.Decimal(15, 2)
  status               InvoiceStatus       @default(DRAFT)
  issueDate            DateTime            @map("issue_date") @db.Date
  dueDate              DateTime            @map("due_date") @db.Date
  sentDate             DateTime?           @map("sent_date") @db.Date
  viewedDate           DateTime?           @map("viewed_date") @db.Date
  paidDate             DateTime?           @map("paid_date") @db.Date
  paymentTransactionId String?             @map("payment_transaction_id") @db.Uuid
  bankAccountId        String?             @map("bank_account_id") @db.Uuid
  paymentTermsDays     Int?                @map("payment_terms_days")
  paymentTermsText     String?             @map("payment_terms_text") @db.VarChar(255)
  paymentInstructions  String?             @map("payment_instructions")
  referenceNumber      String?             @map("reference_number") @db.VarChar(255)
  projectName          String?             @map("project_name") @db.VarChar(255)
  reminderCount        Int                 @default(0) @map("reminder_count")
  templateId           String?             @map("template_id") @db.Uuid
  logoUrl              String?             @map("logo_url") @db.VarChar(500)
  lateFeeRate          Decimal?            @map("late_fee_rate") @db.Decimal(5, 2)
  discountRate         Decimal?            @map("discount_rate") @db.Decimal(5, 2)
  discountAmount       Decimal?            @map("discount_amount") @db.Decimal(15, 2)
  isRecurring          Boolean             @default(false) @map("is_recurring")
  recurringInterval    String?             @map("recurring_interval") @db.VarChar(20)
  nextInvoiceDate      DateTime?           @map("next_invoice_date") @db.Date
  lineItems            Json?               @map("line_items")
  notes                String?
  createdAt            DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime            @updatedAt @map("updated_at") @db.Timestamptz(6)
  consultantPayments   ConsultantPayment[] @relation("InvoiceConsultantPayments")
  bankAccount          BankAccount?        @relation(fields: [bankAccountId], references: [id])
  clientContact        Contact             @relation("ClientInvoices", fields: [clientContactId], references: [id])
  paymentTransaction   Transaction?        @relation("InvoicePayments", fields: [paymentTransactionId], references: [id])
  documents            Document[]

  @@map("invoices")
}

model ConsultantPayment {
  id                   String                  @id @default(uuid()) @db.Uuid
  consultantContactId  String                  @map("consultant_contact_id") @db.Uuid
  relatedInvoiceId     String?                 @map("related_invoice_id") @db.Uuid
  amount               Decimal                 @db.Decimal(15, 2)
  currency             String                  @db.VarChar(3)
  netAmount            Decimal?                @map("net_amount") @db.Decimal(15, 2)
  taxWithheld          Decimal?                @default(0) @map("tax_withheld") @db.Decimal(15, 2)
  taxRate              Decimal?                @default(0) @map("tax_rate") @db.Decimal(5, 2)
  commissionRate       Decimal?                @map("commission_rate") @db.Decimal(5, 2)
  status               ConsultantPaymentStatus @default(PENDING)
  approvalStatus       String?                 @map("approval_status") @db.VarChar(20)
  approvedBy           String?                 @map("approved_by") @db.Uuid
  approvedDate         DateTime?               @map("approved_date") @db.Date
  paymentMethod        PaymentMethod?          @map("payment_method")
  paymentDate          DateTime?               @map("payment_date") @db.Date
  paymentTransactionId String?                 @map("payment_transaction_id") @db.Uuid
  paymentReference     String?                 @map("payment_reference") @db.VarChar(255)
  description          String?
  paymentDetails       Json?                   @map("payment_details")
  createdAt            DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime                @updatedAt @map("updated_at") @db.Timestamptz(6)
  consultantContact    Contact                 @relation(fields: [consultantContactId], references: [id])
  paymentTransaction   Transaction?            @relation("ConsultantPaymentTransactions", fields: [paymentTransactionId], references: [id])
  relatedInvoice       Invoice?                @relation("InvoiceConsultantPayments", fields: [relatedInvoiceId], references: [id])

  @@map("consultant_payments")
}

model ProfitDistribution {
  id                 String                   @id @default(uuid()) @db.Uuid
  period             String                   @db.VarChar(7)
  totalProfit        Decimal                  @map("total_profit") @db.Decimal(15, 2)
  baseCurrency       String                   @map("base_currency") @db.VarChar(3)
  status             ProfitDistributionStatus @default(CALCULATED)
  calculationDetails Json?                    @map("calculation_details")
  calculationDate    DateTime                 @map("calculation_date") @db.Date
  distributionDate   DateTime?                @map("distribution_date") @db.Date
  distributionMethod String?                  @map("distribution_method") @db.VarChar(50)
  approvedBy         String?                  @map("approved_by") @db.Uuid
  approvedDate       DateTime?                @map("approved_date") @db.Date
  createdAt          DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime                 @updatedAt @map("updated_at") @db.Timestamptz(6)
  partnerShares      PartnerProfitShare[]

  @@unique([period, baseCurrency])
  @@map("profit_distributions")
}

model PartnerProfitShare {
  id                   String                   @id @default(uuid()) @db.Uuid
  profitDistributionId String                   @map("profit_distribution_id") @db.Uuid
  partnerContactId     String                   @map("partner_contact_id") @db.Uuid
  sharePercentage      Decimal                  @map("share_percentage") @db.Decimal(5, 2)
  shareAmount          Decimal                  @map("share_amount") @db.Decimal(15, 2)
  currency             String                   @db.VarChar(3)
  status               PartnerProfitShareStatus @default(PENDING)
  paymentTransactionId String?                  @map("payment_transaction_id") @db.Uuid
  createdAt            DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime                 @updatedAt @map("updated_at") @db.Timestamptz(6)
  partnerContact       Contact                  @relation(fields: [partnerContactId], references: [id])
  profitDistribution   ProfitDistribution       @relation(fields: [profitDistributionId], references: [id])

  @@map("partner_profit_shares")
}

model Supplier {
  id                 String         @id @default(uuid()) @db.Uuid
  firstName          String         @map("first_name") @db.VarChar(100)
  lastName           String         @map("last_name") @db.VarChar(100)
  email              String         @unique @db.VarChar(255)
  phone              String?        @db.VarChar(50)
  company            String?        @db.VarChar(255)
  vatNumber          String?        @map("vat_number") @db.VarChar(100)
  address            String?
  city               String?        @db.VarChar(100)
  postalCode         String?        @map("postal_code") @db.VarChar(20)
  country            String?        @db.VarChar(100)
  proofOfAddressUrl  String?        @map("proof_of_address_url") @db.VarChar(500)
  proofOfAddressName String?        @map("proof_of_address_name") @db.VarChar(255)
  proofOfAddressType String?        @map("proof_of_address_type") @db.VarChar(50)
  proofOfAddressSize Int?           @map("proof_of_address_size")
  idDocumentUrl      String?        @map("id_document_url") @db.VarChar(500)
  idDocumentName     String?        @map("id_document_name") @db.VarChar(255)
  idDocumentType     String?        @map("id_document_type") @db.VarChar(50)
  idDocumentSize     Int?           @map("id_document_size")
  status             SupplierStatus @default(ACTIVE)
  isActive           Boolean        @default(true) @map("is_active")
  
  // Airwallex Integration Fields
  airwallexBeneficiaryId    String?  @unique @map("airwallex_beneficiary_id") @db.VarChar(255)
  airwallexEntityType       String?  @map("airwallex_entity_type") @db.VarChar(20) // PERSONAL, COMPANY
  airwallexPaymentMethods   String?  @map("airwallex_payment_methods") @db.VarChar(500) // JSON array as string
  airwallexPayerEntityType  String?  @map("airwallex_payer_entity_type") @db.VarChar(20)
  
  // Bank Details from Airwallex
  bankAccountName           String?  @map("bank_account_name") @db.VarChar(255)
  bankAccountNumber         String?  @map("bank_account_number") @db.VarChar(100)
  bankAccountCurrency       String?  @map("bank_account_currency") @db.VarChar(3)
  bankName                  String?  @map("bank_name") @db.VarChar(255)
  bankCountryCode           String?  @map("bank_country_code") @db.VarChar(2)
  swiftCode                 String?  @map("swift_code") @db.VarChar(20)
  iban                      String?  @db.VarChar(34)
  localClearingSystem       String?  @map("local_clearing_system") @db.VarChar(100)
  
  // Address Details (enhanced)
  addressState              String?  @map("address_state") @db.VarChar(100)
  addressCountryCode        String?  @map("address_country_code") @db.VarChar(2)
  
  // Additional Contact Information
  personalEmail             String?  @map("personal_email") @db.VarChar(255)
  personalNationality       String?  @map("personal_nationality") @db.VarChar(100)
  personalOccupation        String?  @map("personal_occupation") @db.VarChar(255)
  personalIdNumber          String?  @map("personal_id_number") @db.VarChar(100)
  personalFirstNameChinese  String?  @map("personal_first_name_chinese") @db.VarChar(100)
  personalLastNameChinese   String?  @map("personal_last_name_chinese") @db.VarChar(100)
  
  // Legal Representative Information (for companies)
  legalRepFirstName         String?  @map("legal_rep_first_name") @db.VarChar(100)
  legalRepLastName          String?  @map("legal_rep_last_name") @db.VarChar(100)
  legalRepEmail             String?  @map("legal_rep_email") @db.VarChar(255)
  legalRepMobileNumber      String?  @map("legal_rep_mobile_number") @db.VarChar(50)
  legalRepNationality       String?  @map("legal_rep_nationality") @db.VarChar(100)
  legalRepOccupation        String?  @map("legal_rep_occupation") @db.VarChar(255)
  legalRepIdType            String?  @map("legal_rep_id_type") @db.VarChar(50)
  legalRepAddress           String?  @map("legal_rep_address") @db.Text
  legalRepCity              String?  @map("legal_rep_city") @db.VarChar(100)
  legalRepState             String?  @map("legal_rep_state") @db.VarChar(100)
  legalRepPostalCode        String?  @map("legal_rep_postal_code") @db.VarChar(20)
  legalRepCountryCode       String?  @map("legal_rep_country_code") @db.VarChar(2)
  
  // Business Information
  businessRegistrationNumber String? @map("business_registration_number") @db.VarChar(100)
  businessRegistrationType   String? @map("business_registration_type") @db.VarChar(100)
  
  // Sync and Status Information
  airwallexSyncStatus       String?  @default("NONE") @map("airwallex_sync_status") @db.VarChar(20) // NONE, SYNCED, PENDING, ERROR
  airwallexLastSyncAt       DateTime? @map("airwallex_last_sync_at") @db.Timestamptz(6)
  airwallexSyncError        String?  @map("airwallex_sync_error") @db.Text
  airwallexRawData          Json?    @map("airwallex_raw_data") // Store complete Airwallex response
  
  // Currency and Financial Preferences
  preferredCurrency         String?  @default("EUR") @map("preferred_currency") @db.VarChar(3)
  
  createdAt          DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  documents          Document[]

  @@map("suppliers")
}

model ExchangeRate {
  id           String             @id @default(uuid()) @db.Uuid
  fromCurrency String             @map("from_currency") @db.VarChar(3)
  toCurrency   String             @map("to_currency") @db.VarChar(3)
  rate         Decimal            @db.Decimal(10, 6)
  bidRate      Decimal?           @map("bid_rate") @db.Decimal(10, 6)
  askRate      Decimal?           @map("ask_rate") @db.Decimal(10, 6)
  spread       Decimal?           @db.Decimal(10, 6)
  rateType     ExchangeRateType   @default(SPOT) @map("rate_type")
  source       ExchangeRateSource @default(MANUAL)
  provider     String?            @db.VarChar(50)
  rateDate     DateTime           @map("rate_date") @db.Date
  expiresAt    DateTime?          @map("expires_at") @db.Timestamptz(6)
  isActive     Boolean            @default(true) @map("is_active")
  createdAt    DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([fromCurrency, toCurrency, rateDate])
  @@map("exchange_rates")
}

enum UserRole {
  UNASSIGNED
  ADMINISTRATOR
  CLIENT
  AUDITOR
}

enum ContactType {
  CLIENT_COMPANY
  CLIENT_CONTACT
  CONSULTANT
  PARTNER
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum BankAccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CLOSED
}

enum BankAccountType {
  BUSINESS
  PERSONAL
  SAVINGS
  CHECKING
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionCategory {
  INVOICE_PAYMENT
  CONSULTANT_PAYMENT
  EXPENSE
  TRANSFER
  FEE
  INTEREST
  REFUND
  OTHER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransactionSource {
  API
  CSV
  MANUAL
  AIRWALLEX     // Legacy - keeping for existing data
  HSBC_IMPORT   // Legacy - keeping for existing data
  MANUAL_UPLOAD // Legacy - keeping for existing data
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  PARTIAL_PAID
  OVERDUE
  CANCELLED
  REFUNDED
  DISPUTED
}

enum ConsultantPaymentStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  WIRE_TRANSFER
  CHECK
  CASH
  DIGITAL_WALLET
  OTHER
}

enum ProfitDistributionStatus {
  CALCULATED
  DISTRIBUTED
  FINALIZED
}

enum PartnerProfitShareStatus {
  PENDING
  PAID
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ExchangeRateSource {
  AIRWALLEX
  MANUAL
  API
}

enum ExchangeRateType {
  SPOT
  FORWARD
  HISTORICAL
}

model Document {
  id              String        @id @default(uuid()) @db.Uuid
  fileName        String        @map("file_name") @db.VarChar(255)
  originalName    String        @map("original_name") @db.VarChar(255)
  fileType        String        @map("file_type") @db.VarChar(50)
  fileSize        Int           @map("file_size")
  mimeType        String        @map("mime_type") @db.VarChar(100)
  
  // Storage information
  storageProvider String        @map("storage_provider") @db.VarChar(20) // local, supabase
  storagePath     String        @map("storage_path") @db.VarChar(500)
  bucketName      String?       @map("bucket_name") @db.VarChar(100)
  publicUrl       String?       @map("public_url") @db.VarChar(500)
  
  // Relations
  contactId       String?       @map("contact_id") @db.Uuid
  supplierId      String?       @map("supplier_id") @db.Uuid
  invoiceId       String?       @map("invoice_id") @db.Uuid
  userId          String        @map("user_id")
  
  // Document metadata
  documentType    DocumentType  @map("document_type")
  category        String?       @db.VarChar(100)
  description     String?
  tags            String[]      @default([])
  
  // Compliance and validity
  expiryDate      DateTime?     @map("expiry_date") @db.Date
  isActive        Boolean       @default(true) @map("is_active")
  isVerified      Boolean       @default(false) @map("is_verified")
  verifiedBy      String?       @map("verified_by")
  verifiedAt      DateTime?     @map("verified_at") @db.Timestamptz(6)
  
  // Version control
  version         Int           @default(1)
  previousVersionId String?     @map("previous_version_id") @db.Uuid
  
  // Audit trail
  uploadedAt      DateTime      @default(now()) @map("uploaded_at") @db.Timestamptz(6)
  updatedAt       DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt       DateTime?     @map("deleted_at") @db.Timestamptz(6)
  
  // Relations
  contact         Contact?      @relation(fields: [contactId], references: [id])
  supplier        Supplier?     @relation(fields: [supplierId], references: [id])
  invoice         Invoice?      @relation(fields: [invoiceId], references: [id])
  uploadedBy      User          @relation("UploadedDocuments", fields: [userId], references: [id])
  verifiedByUser  User?         @relation("VerifiedDocuments", fields: [verifiedBy], references: [id])
  previousVersion Document?     @relation("DocumentVersions", fields: [previousVersionId], references: [id])
  nextVersions    Document[]    @relation("DocumentVersions")
  
  @@index([contactId, documentType])
  @@index([supplierId, documentType])
  @@index([invoiceId])
  @@index([expiryDate])
  @@index([isActive, documentType])
  @@map("documents")
}

enum DocumentType {
  ID              // ID documents (passport, national ID, driver's license, etc.)
  PROOF_OF_ADDRESS // Proof of address documents
  BANK            // Bank-related documents (statements, account info, etc.)
}
