version: '3.8'

services:
  # PostgreSQL Database (equivalent to Supabase PostgreSQL)
  postgres:
    image: postgres:15-alpine
    container_name: akemisflow_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: akemisflow_dev
      POSTGRES_USER: akemisflow
      POSTGRES_PASSWORD: dev_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./supabase_schema.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - akemisflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U akemisflow -d akemisflow_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgREST API (equivalent to Supabase REST API)
  postgrest:
    image: postgrest/postgrest:v11.2.2
    container_name: akemisflow_postgrest
    restart: unless-stopped
    environment:
      PGRST_DB_URI: "postgres://akemisflow:dev_password_2024@postgres:5432/akemisflow_dev"
      PGRST_DB_SCHEMAS: "public"
      PGRST_DB_ANON_ROLE: "anonymous"
      PGRST_JWT_SECRET: "IX2TSH6xQZYjnU3tw+ngHnXJUuvzb6NnVVkiXqbVi6VOwGtfd9vrO0V8mzNU1UDNa4MV8K5CWuLbc6FYUfPAoQ=="
      PGRST_DB_USE_LEGACY_GUCS: "false"
    ports:
      - "3001:3000"
    networks:
      - akemisflow
    depends_on:
      postgres:
        condition: service_healthy

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: akemisflow_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - akemisflow
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MinIO for S3-compatible storage (equivalent to Supabase Storage)
  minio:
    image: minio/minio:latest
    container_name: akemisflow_minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: akemisflow
      MINIO_ROOT_PASSWORD: dev_password_2024
      MINIO_DEFAULT_BUCKETS: "akemisflow-storage"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    networks:
      - akemisflow
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Next.js Development Server (equivalent to Vercel)
  nextjs:
    build:
      context: .
      dockerfile: ./docker/nextjs/Dockerfile.dev
    container_name: akemisflow_nextjs
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: "postgresql://akemisflow:dev_password_2024@postgres:5432/akemisflow_dev"
      
      # API Configuration (local)
      NEXT_PUBLIC_SUPABASE_URL: "http://localhost:3001"
      NEXT_PUBLIC_SUPABASE_ANON_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxvY2FsaG9zdCIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNjQ4NjE4OTU1LCJleHAiOjIwNjQxOTQ5NTV9.local"
      SUPABASE_SERVICE_ROLE_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxvY2FsaG9zdCIsInJvbGUiOiJzZXJ2aWNlX3JvbGUiLCJpYXQiOjE2NDg2MTg5NTUsImV4cCI6MjA2NDE5NDk1NX0.local"
      SUPABASE_JWT_SECRET: "IX2TSH6xQZYjnU3tw+ngHnXJUuvzb6NnVVkiXqbVi6VOwGtfd9vrO0V8mzNU1UDNa4MV8K5CWuLbc6FYUfPAoQ=="
      
      # S3 Storage (local MinIO)
      SUPABASE_S3_ENDPOINT: "http://localhost:9000"
      SUPABASE_S3_ACCESS_KEY_ID: "akemisflow"
      SUPABASE_S3_SECRET_ACCESS_KEY: "dev_password_2024"
      
      # Application
      NODE_ENV: "development"
      NEXTAUTH_URL: "http://localhost:3000"
      NEXTAUTH_SECRET: "local-dev-secret-2024"
      
      # Redis
      REDIS_URL: "redis://redis:6379"
      
      # Business Configuration
      DEFAULT_CURRENCY: "EUR"
      DEFAULT_TIMEZONE: "Europe/Paris"
      FEATURE_PDF_GENERATION: "true"
      UPLOAD_DIR: "./uploads"
      MAX_FILE_SIZE: "10485760"
      ALLOWED_ORIGINS: "http://localhost:3000"
      LOG_LEVEL: "debug"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    networks:
      - akemisflow
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgrest:
        condition: service_started
      minio:
        condition: service_healthy
    profiles:
      - app

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: akemisflow_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@akemisflow.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    ports:
      - "8080:80"
    networks:
      - akemisflow
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - dev

  # Nginx for local SSL and routing (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: akemisflow_nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "443:443"
      - "80:80"
    networks:
      - akemisflow
    depends_on:
      - nextjs
      - postgrest
      - minio
    profiles:
      - production-like

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  akemisflow:
    driver: bridge
    name: akemisflow_network